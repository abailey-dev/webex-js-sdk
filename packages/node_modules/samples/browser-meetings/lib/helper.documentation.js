/* eslint-env browser */

/* global monaco */

/* eslint-disable-next-line */
(() => {
  let editor = null;
  let previousDecorations = [];
  const CODE_VIEWER_OPEN_CLASS = 'code-viewer-open';

  // eslint-disable-next-line require-jsdoc
  async function loadFile(file) {
    const response = await fetch(file);
    const code = await response.text();

    return code;
  }

  // Attach script tag to document
  const scriptTag = document.createElement('script');

  scriptTag.setAttribute('src', 'lib/monaco-editor/min/vs/loader.js');
  document.body.appendChild(scriptTag);

  scriptTag.onload = () => {
    require.config({paths: {vs: 'lib/monaco-editor/min/vs'}});

    /* eslint-disable */
    require(['vs/editor/editor.main'], async () => {
      monaco.editor.setTheme('vs-dark');
      editor = monaco.editor.create(document.getElementById('code-viewer'), {
        value: await loadFile('app.js'),
        language: 'javascript',
        readOnly: true,
        automaticLayout: true
      });
    });
    /* eslint-enable */
  };

  // Patch console.log function for now in case this POC is not wanted.
  const {log} = console;

  /* eslint-disable */
  console.log = function () {
    let identifer, funcName;
    const functionNameDelimiter = '#';
    // Matches Authentication#initWebex
    const functionIdentifer = /^([a-z0-9]+\#[\$a-z][a-z0-9\-\_]+)\(\)\s*$/i;

    try {
      identifer = arguments[0] ? arguments[0].match( functionIdentifer ) : null;      
      if (identifer) {
          funcName = identifer[1].split(functionNameDelimiter)[1];
          editorGotoFunction(funcName);
      }
    }
    catch (e) {}
    log.apply(console, arguments);
  };
  /* eslint-enable */

  // Event bindings for code viewer
  const closeTab = document.querySelector('#code-viewer-container .tab');

  closeTab.onclick = (e) => {
    e.stopPropagation();
    document.body.classList.remove(CODE_VIEWER_OPEN_CLASS);
  };


  const editorGotoFunction = (name) => {
    const regex = new RegExp(`function ${name}\\([^\\)]*\\)`);
    const model = editor.getModel();
    const matches = model.findMatches(regex, false, true);
    let lineNumber = null;
    let decoration = null;

    if (!matches.length) return;
    lineNumber = matches[0].range.startLineNumber;
    decoration = {range: new monaco.Range(lineNumber, 1, lineNumber, 1), options: {isWholeLine: true, linesDecorationsClassName: 'setLineAttention'}};
    // remove previous decorations
    editor.deltaDecorations(previousDecorations, []);
    // set current decoration and add
    previousDecorations = editor.deltaDecorations([], [decoration]);
    // scroll to line
    editor.revealLinesInCenter(lineNumber, lineNumber);
    // show panel if hidden
    document.body.classList.add(CODE_VIEWER_OPEN_CLASS);
  };

// eslint-disable-next-line
})();