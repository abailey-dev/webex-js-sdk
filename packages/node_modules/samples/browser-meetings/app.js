/* eslint-env browser */

/* global Webex */

/* eslint-disable require-jsdoc */
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
/* eslint-disable no-global-assign */
/* eslint-disable no-multi-assign */

// Globals
let webex;

// Authentication Section --------------------------------------------------

const tokenElm = document.querySelector('#access-token');
const saveElm = document.querySelector('#access-token-save');
const authStatusElm = document.querySelector('#access-token-status');
const registerElm = document.querySelector('#registration-register');
const unregisterElm = document.querySelector('#registration-unregister');
const registrationStatusElm = document.querySelector('#registration-status');

function initWebex() {
  console.log('Authentication#initWebex()');

  tokenElm.disabled = true;
  saveElm.disabled = true;
  authStatusElm.innerHTML = 'initializing...';

  webex = window.webex = Webex.init({
    credentials: {
      access_token: tokenElm.value
    }
  });

  webex.once('ready', () => {
    console.log('Authentication#initWebex() :: Webex Ready');
    registerElm.disabled = false;
    authStatusElm.innerHTML = 'Saved';
    document.dispatchEvent(new Event('webex-ready'));
  });
}

function register() {
  console.log('Authentication#register()');
  registerElm.disabled = true;
  unregisterElm.disabled = true;
  registrationStatusElm.innerHTML = 'Registering...';

  webex.meetings.register()
    .then(() => {
      console.log('Authentication#register() :: successfully registered');
      unregisterElm.disabled = false;
    })
    .catch((error) => {
      console.warn('Authentication#register() :: error registering', error);
      registerElm.disabled = false;
    })
    .finally(() => {
      registrationStatusElm.innerHTML = webex.meetings.registered ?
        'Registered' :
        'Not Registered';
    });
}

function unregister() {
  console.log('Authentication#unregister()');
  registerElm.disabled = true;
  unregisterElm.disabled = true;
  registrationStatusElm.innerHTML = 'Unregistering...';

  webex.meetings.unregister()
    .then(() => {
      console.log('Authentication#unregister() :: successfully unregistered');
      registerElm.disabled = false;
    })
    .catch((error) => {
      console.warn('Authentication#unregister() :: error unregistering', error);
      unregisterElm.disabled = false;
    })
    .finally(() => {
      registrationStatusElm.innerHTML = webex.meetings.regisered ?
        'Registered' :
        'Not Registered';
    });
}

// Meetings Management Section --------------------------------------------------

const createMeetingDestinationElm = document.querySelector('#create-meeting-destination');
const createMeetingActionElm = document.querySelector('#create-meeting-action');
const meetingsJoinDeviceElm = document.querySelector('#meetings-join-device');
const meetingsJoinPinElm = document.querySelector('#meetings-join-pin');
const meetingsJoinModeratorElm = document.querySelector('#meetings-join-moderator');
const meetingsListCollectElm = document.querySelector('#meetings-list-collect');
const meetingsListElm = document.querySelector('#meetings-list');
const meetingsAddMediaElm = document.querySelector('#meetings-add-media');
const meetingsLeaveElm = document.querySelector('#meetings-leave');
const meetingsCurrentDetailsElm = document.querySelector('#meetings-current-details');

function generateMeetingsListItem(meeting) {
  const itemElm = document.createElement('div');
  const joinElm = document.createElement('button');
  const detailsElm = document.createElement('label');

  itemElm.id = `meeting-list-item-${meeting.id}`;
  itemElm.key = meeting.id;

  joinElm.onclick = () => joinMeeting(meeting.id);
  joinElm.type = 'button';
  joinElm.value = meeting.id;
  joinElm.innerHTML = 'meeting.join()';

  detailsElm.innerHTML = meeting.destination ||
    meeting.sipUri ||
    meeting.id;

  itemElm.appendChild(joinElm);
  itemElm.appendChild(detailsElm);

  return itemElm;
}

function collectMeetings() {
  console.log('MeetingsManagement#collectMeetings()');

  webex.meetings.syncMeetings()
    .then(() => new Promise((resolve) => {
      setTimeout(() => resolve(), 200);
    }))
    .then(() => {
      console.log('MeetingsManagement#collectMeetings() :: successfully collected meetings');
      const meetings = webex.meetings.getAllMeetings();

      if (Object.keys(meetings).length === 0) {
        meetingsListElm.innerHTML = 'There are currently no meetings to display';

        return;
      }

      meetingsListElm.innerHTML = '';

      Object.keys(meetings).forEach(
        (key) => {
          meetingsListElm.appendChild(
            generateMeetingsListItem(meetings[key])
          );
        }
      );
    });
}

function createMeeting() {
  console.log('MeetingsManagement#createMeeting()');
  webex.meetings.create(createMeetingDestinationElm.value)
    .then((meeting) => {
      if (meetingsListElm.childElementCount === 0) {
        meetingsListElm.innerHTML = '';
      }

      meetingsListElm.appendChild(
        generateMeetingsListItem(meeting)
      );
    });
}

function joinMeeting(meetingId) {
  console.log('MeetingsManagement#joinMeeting()');
  const meeting = webex.meetings.getAllMeetings()[meetingId];

  meeting.join({
    pin: meetingsJoinPinElm.value,
    moderator: meetingsJoinModeratorElm.checked,
    moveToResource: false
    // resourceId: meetingsJoinDeviceElm.value // Add this after the devices section is ready
  })
    .then(() => {
      meetingsCurrentDetailsElm.innerHTML = meeting.destination ||
        meeting.sipUri ||
        meeting.id;

      meetingsLeaveElm.onclick = () => leaveMeeting(meeting.id);
      document.dispatchEvent(new Event('webex-meeting-joined'));
    });
}

function addMedia() {
  // This method will be filled when generating the Meeting Controls Sources
  // are implemented.
}

function leaveMeeting(meetingId) {
  console.log('MeetingsManagement#leaveMeeting()');
  if (!meetingId) {
    return;
  }

  const meeting = webex.meetings.getAllMeetings()[meetingId];

  meeting.leave()
    .then(() => {
      meetingsCurrentDetailsElm.innerHTML = 'Not currently in a meeting';
    });
}

//
// Meeting Controls Section --------------------------------------------------
//
const generalControlsForm = document.querySelector('#general-controls');
const generalControlsLockElm = document.querySelector('#gc-lock');
const generalControlsUnlockElm = document.querySelector('#gc-unlock');
const generalControlsLockStatus = document.querySelector('#gc-lock-status');
const generalControlsMeetingsList = document.querySelector('#gc-meetings-list');
const generalControlsRecordStatus = document.querySelector('#gc-recording-status');
const generalControlsDtmfTones = document.querySelector('#gc-dtmf-tones');
const generalControlsDtmfStatus = document.querySelector('#gc-dtmf-status');

function getNormalizedMeetingId(meeting) {
  return meeting.sipUri || meeting.id;
}

function updateMeetingDropdown() {
  const allMeeting = webex.meetings.getAllMeetings();
  const options = new DocumentFragment();
  const meetingKeys = Object.keys(allMeeting);

  meetingKeys.forEach((key) => {
    const optionElm = document.createElement('option');
    const meetingId = getNormalizedMeetingId(allMeeting[key]);

    optionElm.value = key;
    optionElm.text = meetingId;

    options.appendChild(optionElm);
  });

  if (meetingKeys.length) {
    generalControlsMeetingsList.innerHTML = '';
    generalControlsMeetingsList.appendChild(options);
  }
  else {
    generalControlsMeetingsList.innerHTML = '<option>No meetings available</option>';
    generalControlsMeetingsList.disabled = true;
  }
}


function getSelectedMeeting() {
  const selectOptions = generalControlsMeetingsList.options;
  const selectedMeeting = selectOptions[selectOptions.selectedIndex].value;
  const meeting = webex.meetings.getAllMeetings()[selectedMeeting];

  return meeting;
}


function lockMeeting() {
  const meeting = getSelectedMeeting();

  console.log('MeetingControls#lockMeeting()');
  if (meeting) {
    generalControlsLockStatus.innerText = 'Locking meeting...';
    meeting.lockMeeting()
      .then(() => {
        generalControlsLockStatus.innerText = 'Meeting locked!';
        console.log('MeetingControls#lockMeeting() :: successfully locked meeting');
      })
      .catch((error) => {
        generalControlsLockStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#lockMeeting() :: unable to lock meeting');
        console.error(error);
      });
  }
}


function unlockMeeting() {
  const meeting = getSelectedMeeting();

  if (meeting) {
    console.log('MeetingControls#unlockMeeting()');
    generalControlsLockStatus.innerText = 'Unlocking meeting...';
    meeting.unlockMeeting()
      .then(() => {
        generalControlsLockStatus.innerText = 'Meeting unlocked!';
        console.log('MeetingControls#unlockMeeting() :: successfully unlocked meeting');
      })
      .catch((error) => {
        generalControlsLockStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#unlockMeeting() :: unable to unlock meeting.');
        console.error(error);
      });
  }
}

function startRecording() {
  const meeting = getSelectedMeeting();

  if (meeting) {
    console.log('MeetingControls#startRecording()');
    generalControlsRecordStatus.innerText = 'Recording meeting...';
    meeting.startRecording()
      .then(() => {
        generalControlsRecordStatus.innerText = 'Meeting is being recorded!';
        console.log('MeetingControls#startRecording() :: meeting recording started!');
      })
      .catch((error) => {
        generalControlsRecordStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#startRecording() :: unable to record meeting.');
        console.error(error);
      });
  }
}


function pauseRecording() {
  const meeting = getSelectedMeeting();

  if (meeting) {
    console.log('MeetingControls#pauseRecording()');
    generalControlsRecordStatus.innerText = 'Pause recording...';
    meeting.pauseRecording()
      .then(() => {
        generalControlsRecordStatus.innerText = 'Recording is paused!';
        console.log('MeetingControls#pauseRecording() :: meeting recording paused!');
      })
      .catch((error) => {
        generalControlsRecordStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#pauseRecording() :: unable to pause recording.');
        console.error(error);
      });
  }
}


function stopRecording() {
  const meeting = getSelectedMeeting();

  if (meeting) {
    console.log('MeetingControls#stopRecording()');
    generalControlsRecordStatus.innerText = 'Stop recording meeting...';
    meeting.stopRecording()
      .then(() => {
        generalControlsRecordStatus.innerText = 'Recorded stopped successfully!';
        console.log('MeetingControls#stopRecording() :: meeting recording stopped!');
      })
      .catch((error) => {
        generalControlsRecordStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#stopRecording() :: unable to stop recording!');
        console.error(error);
      });
  }
}


function sendDtmfTones() {
  const meeting = getSelectedMeeting();
  const tones = generalControlsDtmfTones.value || '';

  if (!tones) {
    console.log('MeetingControls#sendDtmfTones() :: Error, empty string.');
    generalControlsDtmfStatus.innerText = 'Please enter DTMF tones and try again.';

    return;
  }

  if (meeting) {
    console.log('MeetingControls#sendDtmfTones()');
    meeting.sendDTMF(tones)
      .then(() => {
        generalControlsDtmfStatus.innerText = 'DTMF tones sent successfully!';
        console.log('MeetingControls#sendDtmfTones() :: DTMF tones sent!');
      })
      .catch((error) => {
        generalControlsDtmfStatus.innerText = 'Error! See console for details.';
        console.log('MeetingControls#sendDtmfTones() :: unable to send DTMF tones!');
        console.error(error);
      });
  }
}

function getMediaDevices() {
  const meeting = getSelectedMeeting();

  if (meeting) {
    meeting.getDevices().then((devices) => {
      // Why is this not full list?
      // Why are deviceIds missing?
      console.log(devices);
    }).catch((error) => {
      console.log(error);
    });
  }
}


document.addEventListener('webex-ready', () => {
  webex.meetings.on('meeting:added', (meeting) => {
    updateMeetingDropdown();

    // Enable the General Controls form if a meeting is available.
    generalControlsForm.querySelectorAll('fieldset')
      .forEach((fieldset) => { fieldset.disabled = false; });
  });

  webex.meetings.on('meeting:removed', (meeting) => {
    updateMeetingDropdown();
    // Disable form if no meetings are available.
    if (!webex.meetings.getAllMeetings().keys.length) {
      generalControlsForm.querySelectorAll('fieldset')
        .forEach((fieldset) => { fieldset.disabled = true; });
    }
  });
}, {once: true});


document.addEventListener('webex-meeting-joined', () => {
  // Get Media devices
  getMediaDevices();
}, {once: true});
